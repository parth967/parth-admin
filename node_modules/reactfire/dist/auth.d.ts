import firebase from 'firebase/app';
import * as React from 'react';
import { ReactFireOptions, ObservableStatus } from './';
export declare function preloadUser(options?: {
    firebaseApp?: firebase.app.App;
}): Promise<firebase.User>;
/**
 * Subscribe to Firebase auth state changes, including token refresh
 *
 * @param auth - the [firebase.auth](https://firebase.google.com/docs/reference/js/firebase.auth) object
 * @param options
 */
export declare function useUser<T = unknown>(auth?: firebase.auth.Auth, options?: ReactFireOptions<T>): ObservableStatus<firebase.User>;
export declare function useIdTokenResult(user: firebase.User, forceRefresh?: boolean, options?: ReactFireOptions<firebase.auth.IdTokenResult>): ObservableStatus<firebase.auth.IdTokenResult>;
export interface AuthCheckProps {
    auth?: firebase.auth.Auth;
    fallback: React.ReactNode;
    children: React.ReactNode;
    requiredClaims?: Object;
}
export interface ClaimsCheckProps {
    user: firebase.User;
    fallback: React.ReactNode;
    children: React.ReactNode;
    requiredClaims?: {
        [key: string]: any;
    };
}
export declare function ClaimsCheck({ user, fallback, children, requiredClaims }: ClaimsCheckProps): JSX.Element;
export declare function AuthCheck({ auth, fallback, children, requiredClaims }: AuthCheckProps): JSX.Element;
