{"ast":null,"code":"var _jsxFileName = \"D:\\\\React\\\\parth-admin\\\\src\\\\pages\\\\CodeEditor.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { makeStyles, createStyles } from \"@material-ui/core/styles\";\nimport 'firebase/firestore';\nimport { Formik, Form } from 'formik';\nimport * as Yup from 'yup';\nimport { Button, TextField, Grid } from '@material-ui/core'; // define css-in-js\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst useStyles = makeStyles(theme => createStyles({\n  root: {\n    maxWidth: '450px',\n    display: 'block',\n    background: '#fafafa',\n    margin: '0 auto',\n    borderRadius: 10,\n    borderWidth: 1,\n    padding: '2%'\n  },\n  textField: {\n    '& > *': {\n      width: '100%',\n      color: 'white'\n    }\n  },\n  submitButton: {\n    marginTop: '24px'\n  },\n  title: {\n    textAlign: 'center',\n    color: 'black'\n  },\n  successMessage: {\n    color: 'green'\n  },\n  errorMessage: {\n    color: 'red'\n  }\n}));\nconst formStatusProps = {\n  success: {\n    message: 'Signed up successfully.',\n    type: 'success'\n  },\n  duplicate: {\n    message: 'Email-id already exist. Please use different email-id.',\n    type: 'error'\n  },\n  error: {\n    message: 'Something went wrong. Please try again.',\n    type: 'error'\n  }\n};\nconst firebaseConfig = {\n  apiKey: \"AIzaSyDQs2KPcGmYmP5KflHNft-MEYtjb4JP3dI\",\n  authDomain: \"adminpanel-257a3.firebaseapp.com\",\n  projectId: \"adminpanel-257a3\",\n  storageBucket: \"adminpanel-257a3.appspot.com\",\n  messagingSenderId: \"959454529762\",\n  appId: \"1:959454529762:web:2bb8ce08f4c3f0087476bb\"\n};\n\nconst CodeEditor = () => {\n  _s();\n\n  const classes = useStyles();\n  const [displayFormStatus, setDisplayFormStatus] = useState(false);\n  const [formStatus, setFormStatus] = useState({\n    message: '',\n    type: ''\n  });\n\n  const createNewUser = async (data, resetForm) => {\n    firebase.firestore().collection(\"Users\").doc(\"mydoc\").collection(\"Activities\").doc(\"Database\").set({\n      key: \"1\",\n      value: \"\"\n    }).then(ref => {\n      console.log(ref);\n    });\n\n    try {\n      // API call integration will be here. Handle success / error response accordingly.\n      if (data) {\n        setFormStatus(formStatusProps.success);\n        resetForm({});\n      }\n    } catch (error) {\n      const response = error.response;\n\n      if (response.data === 'user already exist' && response.status === 400) {\n        setFormStatus(formStatusProps.duplicate);\n      } else {\n        setFormStatus(formStatusProps.error);\n      }\n    } finally {\n      setDisplayFormStatus(true);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: classes.root,\n      children: /*#__PURE__*/_jsxDEV(Formik, {\n        initialValues: {\n          fullName: '',\n          password: '',\n          confirmPassword: '',\n          email: ''\n        },\n        onSubmit: (values, actions) => {\n          createNewUser(values, actions.resetForm);\n          setTimeout(() => {\n            actions.setSubmitting(false);\n          }, 500);\n        },\n        validationSchema: Yup.object().shape({\n          email: Yup.string().email().required('Enter valid email-id'),\n          fullName: Yup.string().required('Please enter full name'),\n          password: Yup.string().matches(/^(?=.*[A-Z])(?=.*[a-z])(?=.*[0-9])(?=.*[!@#$%^&*()]).{8,20}\\S$/).required('Please valid password. One uppercase, one lowercase, one special character and no spaces'),\n          confirmPassword: Yup.string().required('Required').test('password-match', 'Password musth match', function (value) {\n            return this.parent.password === value;\n          })\n        }),\n        children: props => {\n          const {\n            values,\n            touched,\n            errors,\n            handleBlur,\n            handleChange,\n            isSubmitting\n          } = props;\n          return /*#__PURE__*/_jsxDEV(Form, {\n            children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n              className: classes.title,\n              children: \"Sign up\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 178,\n              columnNumber: 28\n            }, this), /*#__PURE__*/_jsxDEV(Grid, {\n              container: true,\n              justify: \"space-around\",\n              direction: \"row\",\n              children: [/*#__PURE__*/_jsxDEV(Grid, {\n                item: true,\n                lg: 10,\n                md: 10,\n                sm: 10,\n                xs: 10,\n                className: classes.textField,\n                children: /*#__PURE__*/_jsxDEV(TextField, {\n                  name: \"fullName\",\n                  id: \"fullName\",\n                  label: \"Full Name\",\n                  value: values.fullName,\n                  type: \"text\",\n                  helperText: errors.fullName && touched.fullName ? errors.fullName : 'Enter your full name.',\n                  error: errors.fullName && touched.fullName ? true : false,\n                  onChange: handleChange,\n                  onBlur: handleBlur\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 192,\n                  columnNumber: 36\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 184,\n                columnNumber: 32\n              }, this), /*#__PURE__*/_jsxDEV(Grid, {\n                item: true,\n                lg: 10,\n                md: 10,\n                sm: 10,\n                xs: 10,\n                className: classes.textField,\n                children: /*#__PURE__*/_jsxDEV(TextField, {\n                  name: \"password\",\n                  id: \"password\",\n                  label: \"Password\",\n                  value: values.password,\n                  type: \"password\",\n                  helperText: errors.password && touched.password ? 'Please valid password. One uppercase, one lowercase, one special character and no spaces' : 'One uppercase, one lowercase, one special character and no spaces',\n                  error: errors.password && touched.password ? true : false,\n                  onChange: handleChange,\n                  onBlur: handleBlur\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 220,\n                  columnNumber: 36\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 212,\n                columnNumber: 32\n              }, this), /*#__PURE__*/_jsxDEV(Grid, {\n                item: true,\n                lg: 10,\n                md: 10,\n                sm: 10,\n                xs: 10,\n                className: classes.textField,\n                children: /*#__PURE__*/_jsxDEV(TextField, {\n                  name: \"confirmPassword\",\n                  id: \"confirmPassword\",\n                  label: \"Confirm password\",\n                  value: values.confirmPassword,\n                  type: \"password\",\n                  helperText: errors.confirmPassword && touched.confirmPassword ? errors.confirmPassword : 'Re-enter password to confirm',\n                  error: errors.confirmPassword && touched.confirmPassword ? true : false,\n                  onChange: handleChange,\n                  onBlur: handleBlur\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 248,\n                  columnNumber: 36\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 240,\n                columnNumber: 32\n              }, this), /*#__PURE__*/_jsxDEV(Grid, {\n                item: true,\n                lg: 10,\n                md: 10,\n                sm: 10,\n                xs: 10,\n                className: classes.textField,\n                children: /*#__PURE__*/_jsxDEV(TextField, {\n                  name: \"email\",\n                  id: \"email\",\n                  label: \"Email-id\",\n                  value: values.email,\n                  type: \"email\",\n                  helperText: errors.email && touched.email ? errors.email : 'Enter email-id',\n                  error: errors.email && touched.email ? true : false,\n                  onChange: handleChange,\n                  onBlur: handleBlur\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 278,\n                  columnNumber: 36\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 270,\n                columnNumber: 32\n              }, this), /*#__PURE__*/_jsxDEV(Grid, {\n                item: true,\n                lg: 10,\n                md: 10,\n                sm: 10,\n                xs: 10,\n                className: classes.submitButton,\n                children: [/*#__PURE__*/_jsxDEV(Button, {\n                  type: \"submit\",\n                  variant: \"contained\",\n                  color: \"secondary\",\n                  disabled: isSubmitting,\n                  children: \"Submit\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 306,\n                  columnNumber: 32\n                }, this), displayFormStatus && /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"formStatus\",\n                  children: formStatus.type === 'error' ? /*#__PURE__*/_jsxDEV(\"p\", {\n                    className: classes.errorMessage,\n                    children: formStatus.message\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 317,\n                    columnNumber: 44\n                  }, this) : formStatus.type === 'success' ? /*#__PURE__*/_jsxDEV(\"p\", {\n                    className: classes.successMessage,\n                    children: formStatus.message\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 326,\n                    columnNumber: 44\n                  }, this) : null\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 315,\n                  columnNumber: 36\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 298,\n                columnNumber: 32\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 179,\n              columnNumber: 28\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 177,\n            columnNumber: 24\n          }, this);\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 12\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n};\n\n_s(CodeEditor, \"1T464Q7xHXlnFYzQ/em8gX/+UzE=\", false, function () {\n  return [useStyles];\n});\n\n_c = CodeEditor;\nexport default CodeEditor;\n\nvar _c;\n\n$RefreshReg$(_c, \"CodeEditor\");","map":{"version":3,"sources":["D:/React/parth-admin/src/pages/CodeEditor.tsx"],"names":["React","useState","makeStyles","createStyles","Formik","Form","Yup","Button","TextField","Grid","useStyles","theme","root","maxWidth","display","background","margin","borderRadius","borderWidth","padding","textField","width","color","submitButton","marginTop","title","textAlign","successMessage","errorMessage","formStatusProps","success","message","type","duplicate","error","firebaseConfig","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","CodeEditor","classes","displayFormStatus","setDisplayFormStatus","formStatus","setFormStatus","createNewUser","data","resetForm","firebase","firestore","collection","doc","set","key","value","then","ref","console","log","response","status","fullName","password","confirmPassword","email","values","actions","setTimeout","setSubmitting","object","shape","string","required","matches","test","parent","props","touched","errors","handleBlur","handleChange","isSubmitting"],"mappings":"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","sourcesContent":["import React, { FC, ReactElement ,useState} from 'react';\r\nimport { Helmet } from 'react-helmet';\r\nimport { MyForm } from \"./MyForm\";\r\nimport { makeStyles, createStyles, Theme } from \"@material-ui/core/styles\";\r\nimport 'firebase/firestore';\r\nimport { FirebaseAppProvider, useFirestoreDocData, useFirestore, SuspenseWithPerf } from 'reactfire';\r\n// components\r\nimport PageTitle from \"../components/PageTitle\";\r\nimport Box from '@material-ui/core/Box';\r\nimport { Formik, Form, FormikProps } from 'formik'\r\nimport * as Yup from 'yup'\r\nimport firebasesetup from \"./firebasesetup\";\r\n// constants\r\nimport { APP_TITLE, PAGE_TITLE_CODE } from '../utils/constants';\r\nimport { Button ,TextField,Grid} from '@material-ui/core';\r\n// define css-in-js\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n    createStyles({\r\n      root: {\r\n           maxWidth: '450px',\r\n           display: 'block',\r\n           background: '#fafafa',\r\n           margin: '0 auto',\r\n           borderRadius: 10,\r\n    borderWidth: 1,\r\n    padding: '2%',\r\n       },\r\n       textField: {\r\n           '& > *': {\r\n               width: '100%',\r\n               color:'white',\r\n           },\r\n       },\r\n       submitButton: {\r\n           marginTop: '24px',\r\n       },\r\n       title: { textAlign: 'center',\r\n     color:'black' },\r\n       successMessage: { color: 'green' },\r\n       errorMessage: { color: 'red' },\r\n   })\r\n);\r\ninterface ISignUpForm {\r\n   fullName: string\r\n   password: string\r\n   confirmPassword: string\r\n   email: string\r\n}\r\n\r\ninterface IFormStatus {\r\n   message: string\r\n   type: string\r\n}\r\n\r\ninterface IFormStatusProps {\r\n   [key: string]: IFormStatus\r\n}\r\n\r\nconst formStatusProps: IFormStatusProps = {\r\n   success: {\r\n       message: 'Signed up successfully.',\r\n       type: 'success',\r\n   },\r\n   duplicate: {\r\n       message: 'Email-id already exist. Please use different email-id.',\r\n       type: 'error',\r\n   },\r\n   error: {\r\n       message: 'Something went wrong. Please try again.',\r\n       type: 'error',\r\n   },\r\n}\r\nconst firebaseConfig = {\r\n  apiKey: \"AIzaSyDQs2KPcGmYmP5KflHNft-MEYtjb4JP3dI\",\r\n  authDomain: \"adminpanel-257a3.firebaseapp.com\",\r\n  projectId: \"adminpanel-257a3\",\r\n  storageBucket: \"adminpanel-257a3.appspot.com\",\r\n  messagingSenderId: \"959454529762\",\r\n  appId: \"1:959454529762:web:2bb8ce08f4c3f0087476bb\"\r\n};\r\n\r\nconst CodeEditor: FC<{}> = (): ReactElement => {\r\n    const classes = useStyles();\r\n\r\n   const [displayFormStatus, setDisplayFormStatus] = useState(false)\r\n   const [formStatus, setFormStatus] = useState<IFormStatus>({\r\n       message: '',\r\n       type: '',\r\n   })\r\n\r\n   const createNewUser = async (data: ISignUpForm, resetForm: Function) => {\r\n     firebase\r\n     .firestore()\r\n     .collection(\"Users\")\r\n     .doc(\"mydoc\")\r\n     .collection(\"Activities\")\r\n     .doc(\"Database\")\r\n     .set({\r\n       key: \"1\",\r\n       value: \"\",\r\n     })\r\n     .then((ref) => { console.log(ref) });\r\n       try {\r\n\r\n\r\n           // API call integration will be here. Handle success / error response accordingly.\r\n           if (data) {\r\n               setFormStatus(formStatusProps.success)\r\n               resetForm({})\r\n           }\r\n       } catch (error) {\r\n           const response = error.response\r\n           if (\r\n               response.data === 'user already exist' &&\r\n               response.status === 400\r\n           ) {\r\n               setFormStatus(formStatusProps.duplicate)\r\n           } else {\r\n               setFormStatus(formStatusProps.error)\r\n           }\r\n       } finally {\r\n           setDisplayFormStatus(true)\r\n       }\r\n   }\r\n\r\n\r\n\r\n    return (\r\n      <>\r\n      <div className={classes.root}>\r\n           <Formik\r\n               initialValues={{\r\n                   fullName: '',\r\n                   password: '',\r\n                   confirmPassword: '',\r\n                   email: '',\r\n               }}\r\n               onSubmit={(values: ISignUpForm, actions) => {\r\n                   createNewUser(values, actions.resetForm)\r\n                   setTimeout(() => {\r\n                       actions.setSubmitting(false)\r\n                   }, 500)\r\n               }}\r\n               validationSchema={Yup.object().shape({\r\n                   email: Yup.string()\r\n                       .email()\r\n                       .required('Enter valid email-id'),\r\n                   fullName: Yup.string().required('Please enter full name'),\r\n                   password: Yup.string()\r\n                       .matches(\r\n                           /^(?=.*[A-Z])(?=.*[a-z])(?=.*[0-9])(?=.*[!@#$%^&*()]).{8,20}\\S$/\r\n                       )\r\n                       .required(\r\n                           'Please valid password. One uppercase, one lowercase, one special character and no spaces'\r\n                       ),\r\n                   confirmPassword: Yup.string()\r\n                       .required('Required')\r\n                       .test(\r\n                           'password-match',\r\n                           'Password musth match',\r\n                           function (value) {\r\n                               return this.parent.password === value\r\n                           }\r\n                       ),\r\n               })}\r\n           >\r\n               {(props: FormikProps<ISignUpForm>) => {\r\n                   const {\r\n                       values,\r\n                       touched,\r\n                       errors,\r\n                       handleBlur,\r\n                       handleChange,\r\n                       isSubmitting,\r\n                   } = props\r\n                   return (\r\n                       <Form>\r\n                           <h1 className={classes.title}>Sign up</h1>\r\n                           <Grid\r\n                               container\r\n                               justify=\"space-around\"\r\n                               direction=\"row\"\r\n                           >\r\n                               <Grid\r\n                                   item\r\n                                   lg={10}\r\n                                   md={10}\r\n                                   sm={10}\r\n                                   xs={10}\r\n                                   className={classes.textField}\r\n                               >\r\n                                   <TextField\r\n                                       name=\"fullName\"\r\n                                       id=\"fullName\"\r\n                                       label=\"Full Name\"\r\n                                       value={values.fullName}\r\n                                       type=\"text\"\r\n                                       helperText={\r\n                                           errors.fullName && touched.fullName\r\n                                               ? errors.fullName\r\n                                               : 'Enter your full name.'\r\n                                       }\r\n                                       error={\r\n                                           errors.fullName && touched.fullName\r\n                                               ? true\r\n                                               : false\r\n                                       }\r\n                                       onChange={handleChange}\r\n                                       onBlur={handleBlur}\r\n                                   />\r\n                               </Grid>\r\n                               <Grid\r\n                                   item\r\n                                   lg={10}\r\n                                   md={10}\r\n                                   sm={10}\r\n                                   xs={10}\r\n                                   className={classes.textField}\r\n                               >\r\n                                   <TextField\r\n                                       name=\"password\"\r\n                                       id=\"password\"\r\n                                       label=\"Password\"\r\n                                       value={values.password}\r\n                                       type=\"password\"\r\n                                       helperText={\r\n                                           errors.password && touched.password\r\n                                               ? 'Please valid password. One uppercase, one lowercase, one special character and no spaces'\r\n                                               : 'One uppercase, one lowercase, one special character and no spaces'\r\n                                       }\r\n                                       error={\r\n                                           errors.password && touched.password\r\n                                               ? true\r\n                                               : false\r\n                                       }\r\n                                       onChange={handleChange}\r\n                                       onBlur={handleBlur}\r\n                                   />\r\n                               </Grid>\r\n                               <Grid\r\n                                   item\r\n                                   lg={10}\r\n                                   md={10}\r\n                                   sm={10}\r\n                                   xs={10}\r\n                                   className={classes.textField}\r\n                               >\r\n                                   <TextField\r\n                                       name=\"confirmPassword\"\r\n                                       id=\"confirmPassword\"\r\n                                       label=\"Confirm password\"\r\n                                       value={values.confirmPassword}\r\n                                       type=\"password\"\r\n                                       helperText={\r\n                                           errors.confirmPassword &&\r\n                                           touched.confirmPassword\r\n                                               ? errors.confirmPassword\r\n                                               : 'Re-enter password to confirm'\r\n                                       }\r\n                                       error={\r\n                                           errors.confirmPassword &&\r\n                                           touched.confirmPassword\r\n                                               ? true\r\n                                               : false\r\n                                       }\r\n                                       onChange={handleChange}\r\n                                       onBlur={handleBlur}\r\n                                   />\r\n                               </Grid>\r\n                               <Grid\r\n                                   item\r\n                                   lg={10}\r\n                                   md={10}\r\n                                   sm={10}\r\n                                   xs={10}\r\n                                   className={classes.textField}\r\n                               >\r\n                                   <TextField\r\n                                       name=\"email\"\r\n                                       id=\"email\"\r\n                                       label=\"Email-id\"\r\n                                       value={values.email}\r\n                                       type=\"email\"\r\n                                       helperText={\r\n                                           errors.email && touched.email\r\n                                               ? errors.email\r\n                                               : 'Enter email-id'\r\n                                       }\r\n                                       error={\r\n                                           errors.email && touched.email\r\n                                               ? true\r\n                                               : false\r\n                                       }\r\n                                       onChange={handleChange}\r\n                                       onBlur={handleBlur}\r\n                                   />\r\n                               </Grid>\r\n                               <Grid\r\n                                   item\r\n                                   lg={10}\r\n                                   md={10}\r\n                                   sm={10}\r\n                                   xs={10}\r\n                                   className={classes.submitButton}\r\n                               >\r\n                               <Button\r\n                                   type=\"submit\"\r\n                                   variant=\"contained\"\r\n                                   color=\"secondary\"\r\n                                   disabled={isSubmitting}\r\n                               >\r\n                                   Submit\r\n                               </Button>\r\n                               {displayFormStatus && (\r\n                                   <div className=\"formStatus\">\r\n                                       {formStatus.type === 'error' ? (\r\n                                           <p\r\n                                               className={\r\n                                                   classes.errorMessage\r\n                                               }\r\n                                           >\r\n                                               {formStatus.message}\r\n                                           </p>\r\n                                       ) : formStatus.type ===\r\n                                         'success' ? (\r\n                                           <p\r\n                                               className={\r\n                                                   classes.successMessage\r\n                                               }\r\n                                           >\r\n                                               {formStatus.message}\r\n                                           </p>\r\n                                       ) : null}\r\n                                   </div>\r\n                               )}\r\n                               </Grid>\r\n                           </Grid>\r\n                       </Form>\r\n                   )\r\n               }}\r\n           </Formik>\r\n       </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default CodeEditor;\r\n"]},"metadata":{},"sourceType":"module"}