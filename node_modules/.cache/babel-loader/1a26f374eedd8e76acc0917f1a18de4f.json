{"ast":null,"code":"var _jsxFileName = \"D:\\\\React\\\\parth-admin\\\\src\\\\pages\\\\CodeEditor.tsx\",\n    _s2 = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { makeStyles, createStyles } from \"@material-ui/core/styles\";\nimport 'firebase/firestore';\nimport { FirebaseAppProvider, useFirestoreDocData, useFirestore } from 'reactfire'; // components\n\nimport { Formik, Form } from 'formik';\nimport * as Yup from 'yup';\nimport Adddata from './Adddata';\nimport { Button, TextField, Grid } from '@material-ui/core'; // define css-in-js\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst useStyles = makeStyles(theme => createStyles({\n  root: {\n    maxWidth: '450px',\n    display: 'block',\n    background: '#fafafa',\n    margin: '0 auto',\n    borderRadius: 10,\n    borderWidth: 1,\n    padding: '2%'\n  },\n  textField: {\n    '& > *': {\n      width: '100%',\n      color: 'white'\n    }\n  },\n  submitButton: {\n    marginTop: '24px'\n  },\n  title: {\n    textAlign: 'center',\n    color: 'black'\n  },\n  successMessage: {\n    color: 'green'\n  },\n  errorMessage: {\n    color: 'red'\n  }\n}));\nconst formStatusProps = {\n  success: {\n    message: 'Signed up successfully.',\n    type: 'success'\n  },\n  duplicate: {\n    message: 'Email-id already exist. Please use different email-id.',\n    type: 'error'\n  },\n  error: {\n    message: 'Something went wrong. Please try again.',\n    type: 'error'\n  }\n};\nconst firebaseConfig = {\n  apiKey: \"AIzaSyDQs2KPcGmYmP5KflHNft-MEYtjb4JP3dI\",\n  authDomain: \"adminpanel-257a3.firebaseapp.com\",\n  projectId: \"adminpanel-257a3\",\n  storageBucket: \"adminpanel-257a3.appspot.com\",\n  messagingSenderId: \"959454529762\",\n  appId: \"1:959454529762:web:2bb8ce08f4c3f0087476bb\"\n};\n\nconst CodeEditor = () => {\n  _s2();\n\n  var _s = $RefreshSig$();\n\n  const classes = useStyles();\n  const [displayFormStatus, setDisplayFormStatus] = useState(false);\n  const [formStatus, setFormStatus] = useState({\n    message: '',\n    type: ''\n  });\n\n  const createNewUser = async (data, resetForm) => {\n    try {\n      // API call integration will be here. Handle success / error response accordingly.\n      if (data) {\n        setFormStatus(formStatusProps.success);\n        resetForm({});\n      }\n    } catch (error) {\n      const response = error.response;\n\n      if (response.data === 'user already exist' && response.status === 400) {\n        setFormStatus(formStatusProps.duplicate);\n      } else {\n        setFormStatus(formStatusProps.error);\n      }\n    } finally {\n      setDisplayFormStatus(true);\n    }\n  };\n\n  function Name() {\n    _s();\n\n    const nameref = useFirestore().collection('test').doc('ER6muz4JbkfKZfeQGznr');\n    const {\n      status,\n      data\n    } = useFirestoreDocData(nameref);\n\n    if (status === 'loading') {\n      return /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Wait\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 12\n      }, this);\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: data.email\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 10\n    }, this);\n  }\n\n  _s(Name, \"1o17qngOJmtqMhw46p7pcJuwE50=\", false, function () {\n    return [useFirestore, useFirestoreDocData];\n  });\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(FirebaseAppProvider, {\n      firebaseConfig: firebaseConfig,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: classes.root,\n        children: /*#__PURE__*/_jsxDEV(Formik, {\n          initialValues: {\n            fullName: '',\n            password: '',\n            confirmPassword: '',\n            email: ''\n          },\n          onSubmit: (values, actions) => {\n            console.log(values); // nameref.set(values)\n            //Adddata(values);\n\n            createNewUser(values, actions.resetForm);\n            setTimeout(() => {\n              actions.setSubmitting(false);\n            }, 500);\n          },\n          validationSchema: Yup.object().shape({\n            email: Yup.string().email().required('Enter valid email-id'),\n            fullName: Yup.string().required('Please enter full name'),\n            password: Yup.string().matches(/^(?=.*[A-Z])(?=.*[a-z])(?=.*[0-9])(?=.*[!@#$%^&*()]).{8,20}\\S$/).required('Please valid password. One uppercase, one lowercase, one special character and no spaces'),\n            confirmPassword: Yup.string().required('Required').test('password-match', 'Password musth match', function (value) {\n              return this.parent.password === value;\n            })\n          }),\n          children: props => {\n            const {\n              values,\n              touched,\n              errors,\n              handleBlur,\n              handleChange,\n              isSubmitting\n            } = props;\n            return /*#__PURE__*/_jsxDEV(Form, {\n              children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n                className: classes.title,\n                children: \"Sign up\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 195,\n                columnNumber: 28\n              }, this), /*#__PURE__*/_jsxDEV(Grid, {\n                container: true,\n                justify: \"space-around\",\n                direction: \"row\",\n                children: [/*#__PURE__*/_jsxDEV(Grid, {\n                  item: true,\n                  lg: 10,\n                  md: 10,\n                  sm: 10,\n                  xs: 10,\n                  className: classes.textField,\n                  children: /*#__PURE__*/_jsxDEV(TextField, {\n                    name: \"fullName\",\n                    id: \"fullName\",\n                    label: \"Full Name\",\n                    value: values.fullName,\n                    type: \"text\",\n                    helperText: errors.fullName && touched.fullName ? errors.fullName : 'Enter your full name.',\n                    error: errors.fullName && touched.fullName ? true : false,\n                    onChange: handleChange,\n                    onBlur: handleBlur\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 209,\n                    columnNumber: 36\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 201,\n                  columnNumber: 32\n                }, this), /*#__PURE__*/_jsxDEV(Grid, {\n                  item: true,\n                  lg: 10,\n                  md: 10,\n                  sm: 10,\n                  xs: 10,\n                  className: classes.textField,\n                  children: /*#__PURE__*/_jsxDEV(TextField, {\n                    name: \"password\",\n                    id: \"password\",\n                    label: \"Password\",\n                    value: values.password,\n                    type: \"password\",\n                    helperText: errors.password && touched.password ? 'Please valid password. One uppercase, one lowercase, one special character and no spaces' : 'One uppercase, one lowercase, one special character and no spaces',\n                    error: errors.password && touched.password ? true : false,\n                    onChange: handleChange,\n                    onBlur: handleBlur\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 237,\n                    columnNumber: 36\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 229,\n                  columnNumber: 32\n                }, this), /*#__PURE__*/_jsxDEV(Grid, {\n                  item: true,\n                  lg: 10,\n                  md: 10,\n                  sm: 10,\n                  xs: 10,\n                  className: classes.textField,\n                  children: /*#__PURE__*/_jsxDEV(TextField, {\n                    name: \"confirmPassword\",\n                    id: \"confirmPassword\",\n                    label: \"Confirm password\",\n                    value: values.confirmPassword,\n                    type: \"password\",\n                    helperText: errors.confirmPassword && touched.confirmPassword ? errors.confirmPassword : 'Re-enter password to confirm',\n                    error: errors.confirmPassword && touched.confirmPassword ? true : false,\n                    onChange: handleChange,\n                    onBlur: handleBlur\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 265,\n                    columnNumber: 36\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 257,\n                  columnNumber: 32\n                }, this), /*#__PURE__*/_jsxDEV(Grid, {\n                  item: true,\n                  lg: 10,\n                  md: 10,\n                  sm: 10,\n                  xs: 10,\n                  className: classes.textField,\n                  children: /*#__PURE__*/_jsxDEV(TextField, {\n                    name: \"email\",\n                    id: \"email\",\n                    label: \"Email-id\",\n                    value: values.email,\n                    type: \"email\",\n                    helperText: errors.email && touched.email ? errors.email : 'Enter email-id',\n                    error: errors.email && touched.email ? true : false,\n                    onChange: handleChange,\n                    onBlur: handleBlur\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 295,\n                    columnNumber: 36\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 287,\n                  columnNumber: 32\n                }, this), /*#__PURE__*/_jsxDEV(Grid, {\n                  item: true,\n                  lg: 10,\n                  md: 10,\n                  sm: 10,\n                  xs: 10,\n                  className: classes.submitButton,\n                  children: [/*#__PURE__*/_jsxDEV(Button, {\n                    type: \"submit\",\n                    variant: \"contained\",\n                    color: \"secondary\",\n                    disabled: isSubmitting,\n                    children: \"Submit\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 323,\n                    columnNumber: 32\n                  }, this), displayFormStatus && /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"formStatus\",\n                    children: formStatus.type === 'error' ? /*#__PURE__*/_jsxDEV(\"p\", {\n                      className: classes.errorMessage,\n                      children: formStatus.message\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 336,\n                      columnNumber: 44\n                    }, this) : formStatus.type === 'success' ? /*#__PURE__*/_jsxDEV(\"p\", {\n                      className: classes.successMessage,\n                      children: formStatus.message\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 346,\n                      columnNumber: 44\n                    }, this) : null\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 332,\n                    columnNumber: 36\n                  }, this), /*#__PURE__*/_jsxDEV(Name, {}, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 356,\n                    columnNumber: 32\n                  }, this), /*#__PURE__*/_jsxDEV(Adddata, {}, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 357,\n                    columnNumber: 32\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 315,\n                  columnNumber: 32\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 196,\n                columnNumber: 28\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 194,\n              columnNumber: 24\n            }, this);\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 143,\n          columnNumber: 12\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n};\n\n_s2(CodeEditor, \"1T464Q7xHXlnFYzQ/em8gX/+UzE=\", false, function () {\n  return [useStyles];\n});\n\n_c = CodeEditor;\nexport default CodeEditor;\n\nvar _c;\n\n$RefreshReg$(_c, \"CodeEditor\");","map":{"version":3,"sources":["D:/React/parth-admin/src/pages/CodeEditor.tsx"],"names":["React","useState","makeStyles","createStyles","FirebaseAppProvider","useFirestoreDocData","useFirestore","Formik","Form","Yup","Adddata","Button","TextField","Grid","useStyles","theme","root","maxWidth","display","background","margin","borderRadius","borderWidth","padding","textField","width","color","submitButton","marginTop","title","textAlign","successMessage","errorMessage","formStatusProps","success","message","type","duplicate","error","firebaseConfig","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","CodeEditor","classes","displayFormStatus","setDisplayFormStatus","formStatus","setFormStatus","createNewUser","data","resetForm","response","status","Name","nameref","collection","doc","email","fullName","password","confirmPassword","values","actions","console","log","setTimeout","setSubmitting","object","shape","string","required","matches","test","value","parent","props","touched","errors","handleBlur","handleChange","isSubmitting"],"mappings":"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","sourcesContent":["import React, { FC, ReactElement ,useState} from 'react';\r\nimport { Helmet } from 'react-helmet';\r\nimport { MyForm } from \"./MyForm\";\r\nimport { makeStyles, createStyles, Theme } from \"@material-ui/core/styles\";\r\nimport 'firebase/firestore';\r\nimport { FirebaseAppProvider, useFirestoreDocData, useFirestore, SuspenseWithPerf } from 'reactfire';\r\n// components\r\nimport PageTitle from \"../components/PageTitle\";\r\nimport Box from '@material-ui/core/Box';\r\nimport { Formik, Form, FormikProps } from 'formik'\r\nimport * as Yup from 'yup'\r\nimport Adddata from './Adddata'\r\nimport firebasesetup from \"./firebasesetup\";\r\n// constants\r\nimport { APP_TITLE, PAGE_TITLE_CODE } from '../utils/constants';\r\nimport { Button ,TextField,Grid} from '@material-ui/core';\r\n// define css-in-js\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n    createStyles({\r\n      root: {\r\n           maxWidth: '450px',\r\n           display: 'block',\r\n           background: '#fafafa',\r\n           margin: '0 auto',\r\n           borderRadius: 10,\r\n    borderWidth: 1,\r\n    padding: '2%',\r\n       },\r\n       textField: {\r\n           '& > *': {\r\n               width: '100%',\r\n               color:'white',\r\n           },\r\n       },\r\n       submitButton: {\r\n           marginTop: '24px',\r\n       },\r\n       title: { textAlign: 'center',\r\n     color:'black' },\r\n       successMessage: { color: 'green' },\r\n       errorMessage: { color: 'red' },\r\n   })\r\n);\r\ninterface ISignUpForm {\r\n   fullName: string\r\n   password: string\r\n   confirmPassword: string\r\n   email: string\r\n}\r\n\r\ninterface IFormStatus {\r\n   message: string\r\n   type: string\r\n}\r\n\r\ninterface IFormStatusProps {\r\n   [key: string]: IFormStatus\r\n}\r\ninterface Ivaluesfirebase{\r\n  fullName: string\r\n  password: string\r\n  confirmPassword: string\r\n  email: string\r\n}\r\n\r\nconst formStatusProps: IFormStatusProps = {\r\n   success: {\r\n       message: 'Signed up successfully.',\r\n       type: 'success',\r\n   },\r\n   duplicate: {\r\n       message: 'Email-id already exist. Please use different email-id.',\r\n       type: 'error',\r\n   },\r\n   error: {\r\n       message: 'Something went wrong. Please try again.',\r\n       type: 'error',\r\n   },\r\n}\r\nconst firebaseConfig = {\r\n  apiKey: \"AIzaSyDQs2KPcGmYmP5KflHNft-MEYtjb4JP3dI\",\r\n  authDomain: \"adminpanel-257a3.firebaseapp.com\",\r\n  projectId: \"adminpanel-257a3\",\r\n  storageBucket: \"adminpanel-257a3.appspot.com\",\r\n  messagingSenderId: \"959454529762\",\r\n  appId: \"1:959454529762:web:2bb8ce08f4c3f0087476bb\"\r\n};\r\n\r\n\r\nconst CodeEditor: FC<{}> = (): ReactElement => {\r\n    const classes = useStyles();\r\n\r\n\r\n   const [displayFormStatus, setDisplayFormStatus] = useState(false)\r\n   const [formStatus, setFormStatus] = useState<IFormStatus>({\r\n       message: '',\r\n       type: '',\r\n   })\r\n\r\n   const createNewUser = async (data: ISignUpForm, resetForm: Function) => {\r\n       try {\r\n           // API call integration will be here. Handle success / error response accordingly.\r\n           if (data) {\r\n\r\n               setFormStatus(formStatusProps.success)\r\n               resetForm({})\r\n           }\r\n       } catch (error) {\r\n           const response = error.response\r\n           if (\r\n               response.data === 'user already exist' &&\r\n               response.status === 400\r\n           ) {\r\n               setFormStatus(formStatusProps.duplicate)\r\n           } else {\r\n               setFormStatus(formStatusProps.error)\r\n           }\r\n       } finally {\r\n           setDisplayFormStatus(true)\r\n       }\r\n\r\n   }\r\n\r\nfunction Name() {\r\n  const nameref = useFirestore()\r\n  .collection('test')\r\n  .doc('ER6muz4JbkfKZfeQGznr');\r\n  const {status, data} = useFirestoreDocData(nameref);\r\n  if (status === 'loading'){\r\n    return <p>Wait</p>\r\n  }\r\n  return <p>{data.email}</p>\r\n}\r\n\r\n\r\n\r\n    return (\r\n\r\n      <>\r\n      <FirebaseAppProvider firebaseConfig={firebaseConfig}>\r\n\r\n      <div className={classes.root}>\r\n           <Formik\r\n               initialValues={{\r\n                   fullName: '',\r\n                   password: '',\r\n                   confirmPassword: '',\r\n                   email: '',\r\n               }}\r\n\r\n               onSubmit={(values: ISignUpForm, actions) => {\r\n                 console.log(values)\r\n                // nameref.set(values)\r\n\r\n                  //Adddata(values);\r\n                   createNewUser(values, actions.resetForm)\r\n                   setTimeout(() => {\r\n                       actions.setSubmitting(false)\r\n                   }, 500)\r\n               }}\r\n               validationSchema={Yup.object().shape({\r\n                   email: Yup.string()\r\n                       .email()\r\n                       .required('Enter valid email-id'),\r\n                   fullName: Yup.string().required('Please enter full name'),\r\n                   password: Yup.string()\r\n                       .matches(\r\n                           /^(?=.*[A-Z])(?=.*[a-z])(?=.*[0-9])(?=.*[!@#$%^&*()]).{8,20}\\S$/\r\n                       )\r\n                       .required(\r\n                           'Please valid password. One uppercase, one lowercase, one special character and no spaces'\r\n                       ),\r\n                   confirmPassword: Yup.string()\r\n                       .required('Required')\r\n                       .test(\r\n                           'password-match',\r\n                           'Password musth match',\r\n                           function (value) {\r\n                               return this.parent.password === value\r\n                           }\r\n                       ),\r\n               })}\r\n           >\r\n               {(props: FormikProps<ISignUpForm>) => {\r\n                   const {\r\n                       values,\r\n                       touched,\r\n                       errors,\r\n                       handleBlur,\r\n                       handleChange,\r\n                       isSubmitting,\r\n                   } = props\r\n                   return (\r\n                       <Form>\r\n                           <h1 className={classes.title}>Sign up</h1>\r\n                           <Grid\r\n                               container\r\n                               justify=\"space-around\"\r\n                               direction=\"row\"\r\n                           >\r\n                               <Grid\r\n                                   item\r\n                                   lg={10}\r\n                                   md={10}\r\n                                   sm={10}\r\n                                   xs={10}\r\n                                   className={classes.textField}\r\n                               >\r\n                                   <TextField\r\n                                       name=\"fullName\"\r\n                                       id=\"fullName\"\r\n                                       label=\"Full Name\"\r\n                                       value={values.fullName}\r\n                                       type=\"text\"\r\n                                       helperText={\r\n                                           errors.fullName && touched.fullName\r\n                                               ? errors.fullName\r\n                                               : 'Enter your full name.'\r\n                                       }\r\n                                       error={\r\n                                           errors.fullName && touched.fullName\r\n                                               ? true\r\n                                               : false\r\n                                       }\r\n                                       onChange={handleChange}\r\n                                       onBlur={handleBlur}\r\n                                   />\r\n                               </Grid>\r\n                               <Grid\r\n                                   item\r\n                                   lg={10}\r\n                                   md={10}\r\n                                   sm={10}\r\n                                   xs={10}\r\n                                   className={classes.textField}\r\n                               >\r\n                                   <TextField\r\n                                       name=\"password\"\r\n                                       id=\"password\"\r\n                                       label=\"Password\"\r\n                                       value={values.password}\r\n                                       type=\"password\"\r\n                                       helperText={\r\n                                           errors.password && touched.password\r\n                                               ? 'Please valid password. One uppercase, one lowercase, one special character and no spaces'\r\n                                               : 'One uppercase, one lowercase, one special character and no spaces'\r\n                                       }\r\n                                       error={\r\n                                           errors.password && touched.password\r\n                                               ? true\r\n                                               : false\r\n                                       }\r\n                                       onChange={handleChange}\r\n                                       onBlur={handleBlur}\r\n                                   />\r\n                               </Grid>\r\n                               <Grid\r\n                                   item\r\n                                   lg={10}\r\n                                   md={10}\r\n                                   sm={10}\r\n                                   xs={10}\r\n                                   className={classes.textField}\r\n                               >\r\n                                   <TextField\r\n                                       name=\"confirmPassword\"\r\n                                       id=\"confirmPassword\"\r\n                                       label=\"Confirm password\"\r\n                                       value={values.confirmPassword}\r\n                                       type=\"password\"\r\n                                       helperText={\r\n                                           errors.confirmPassword &&\r\n                                           touched.confirmPassword\r\n                                               ? errors.confirmPassword\r\n                                               : 'Re-enter password to confirm'\r\n                                       }\r\n                                       error={\r\n                                           errors.confirmPassword &&\r\n                                           touched.confirmPassword\r\n                                               ? true\r\n                                               : false\r\n                                       }\r\n                                       onChange={handleChange}\r\n                                       onBlur={handleBlur}\r\n                                   />\r\n                               </Grid>\r\n                               <Grid\r\n                                   item\r\n                                   lg={10}\r\n                                   md={10}\r\n                                   sm={10}\r\n                                   xs={10}\r\n                                   className={classes.textField}\r\n                               >\r\n                                   <TextField\r\n                                       name=\"email\"\r\n                                       id=\"email\"\r\n                                       label=\"Email-id\"\r\n                                       value={values.email}\r\n                                       type=\"email\"\r\n                                       helperText={\r\n                                           errors.email && touched.email\r\n                                               ? errors.email\r\n                                               : 'Enter email-id'\r\n                                       }\r\n                                       error={\r\n                                           errors.email && touched.email\r\n                                               ? true\r\n                                               : false\r\n                                       }\r\n                                       onChange={handleChange}\r\n                                       onBlur={handleBlur}\r\n                                   />\r\n                               </Grid>\r\n                               <Grid\r\n                                   item\r\n                                   lg={10}\r\n                                   md={10}\r\n                                   sm={10}\r\n                                   xs={10}\r\n                                   className={classes.submitButton}\r\n                               >\r\n                               <Button\r\n                                   type=\"submit\"\r\n                                   variant=\"contained\"\r\n                                   color=\"secondary\"\r\n                                   disabled={isSubmitting}\r\n                               >\r\n                                   Submit\r\n                               </Button>\r\n                               {displayFormStatus && (\r\n                                   <div className=\"formStatus\">\r\n\r\n\r\n                                       {formStatus.type === 'error' ? (\r\n                                           <p\r\n                                               className={\r\n                                                   classes.errorMessage\r\n                                               }\r\n                                           >\r\n                                               {formStatus.message}\r\n                                           </p>\r\n                                       ) : formStatus.type ===\r\n                                         'success' ? (\r\n\r\n                                           <p\r\n                                               className={\r\n                                                   classes.successMessage\r\n                                               }\r\n                                           >\r\n                                               {formStatus.message}\r\n                                           </p>\r\n                                       ) : null}\r\n                                   </div>\r\n                               )}\r\n                               <Name />\r\n                               <Adddata />\r\n\r\n\r\n\r\n                               </Grid>\r\n                           </Grid>\r\n                       </Form>\r\n                   )\r\n               }}\r\n           </Formik>\r\n       </div>\r\n       </FirebaseAppProvider>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default CodeEditor;\r\n"]},"metadata":{},"sourceType":"module"}